#!/bin/bash
#
# CoreOS offline installer
#
# this is a patched version of the original coreos-install script from 
# https://raw.githubusercontent.com/coreos/init/master/bin/coreos-install
#
# changes:
# - use an offline image for install
# - install app data
#
# Original work Copyright (c) 2013 The CoreOS Authors
# Modified work Copyright (c) 2016 NETHINKS GmbH
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#   * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#   * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

umask 077

USAGE="Usage: $0  [-d /dev/device]
Options:
    -d DEVICE   Install CoreOS to the given device.
    -c CLOUD    Insert a cloud-init config to be executed on boot.
    -i IGNITION Insert an Ignition config to be executed on boot.
    -a APPDATA  Install all data of this directory to /app
    -v          Super verbose, for debugging.
    -h          This ;-)

This tool installs CoreOS on a block device. If you PXE booted CoreOS on a
machine then use this tool to make a permanent install.
"

IMAGE="coreos_image.bin.bz2"
APPDATA=""
DEVICE=""
CLOUDINIT=""

while getopts "d:c:i:a:vh" OPTION
do
    case $OPTION in
        d) DEVICE="$OPTARG" ;;
        c) CLOUDINIT="$OPTARG" ;;
        i) IGNITION="$OPTARG" ;;
        a) APPDATA="$OPTARG" ;;
        v) set -x ;;
        h) echo "$USAGE"; exit;;
        *) exit 1;;
    esac
done

# Device is required, must not be a partition, must be writable
if [[ -z "${DEVICE}" ]]; then
    echo "$0: No target block device provided, -d is required." >&2
    exit 1
fi

if ! [[ $(lsblk -n -d -o TYPE "${DEVICE}") =~ ^(disk|loop|lvm)$ ]]; then
    echo "$0: Target block device (${DEVICE}) is not a full disk." >&2
    exit 1
fi

if [[ ! -w "${DEVICE}" ]]; then
    echo "$0: Target block device (${DEVICE}) is not writable (are you root?)" >&2
    exit 1
fi

if [[ -n "${CLOUDINIT}" ]]; then
    if [[ ! -f "${CLOUDINIT}" ]]; then
        echo "$0: Cloud config file (${CLOUDINIT}) does not exist." >&2
        exit 1
    fi

    if type -P coreos-cloudinit >/dev/null; then
        if ! coreos-cloudinit -from-file="${CLOUDINIT}" -validate; then
            echo "$0: Cloud config file (${CLOUDINIT}) is not valid." >&2
            exit 1
        fi
    else
        echo "$0: coreos-cloudinit not found. Could not validate config. Continuing..." >&2
    fi
fi

if [[ -n "${IGNITION}" ]]; then
    if [[ ! -f "${IGNITION}" ]]; then
        echo "$0: Ignition config file (${IGNITION}) does not exist." >&2
        exit 1
    fi
fi

# Pre-flight checks pass, lets get this party started!
WORKDIR=$(mktemp --tmpdir -d coreos-install.XXXXXXXXXX)
trap "rm -rf '${WORKDIR}'" EXIT

if ! (bunzip2 "${IMAGE}"  --stdout >"${DEVICE}") \
then
    echo "Cannot expand ${IMAGE} to ${DEVICE}" >&2
    wipefs --all --backup "${DEVICE}"
    exit 1
fi
# inform the OS of partition table changes
blockdev --rereadpt "${DEVICE}"


if [[ -n "${CLOUDINIT}" ]]; then
    # The ROOT partition should be #9 but make no assumptions here!
    # Also don't mount by label directly in case other devices conflict.
    ROOT_DEV=$(blkid -t "LABEL=ROOT" -o device "${DEVICE}"*)

    if [[ -z "${ROOT_DEV}" ]]; then
        echo "Unable to find new ROOT partition on ${DEVICE}" >&2
        exit 1
    fi

    mkdir -p "${WORKDIR}/rootfs"
    case $(blkid -t "LABEL=ROOT" -o value -s TYPE "${ROOT_DEV}") in
      "btrfs") mount -t btrfs -o subvol=root "${ROOT_DEV}" "${WORKDIR}/rootfs" ;;
      *)       mount "${ROOT_DEV}" "${WORKDIR}/rootfs" ;;
    esac
    trap "umount '${WORKDIR}/rootfs' && rm -rf '${WORKDIR}'" EXIT

    # resize filesystems
    echo "Resize filesystems..."
    /usr/lib64/coreos/extend-filesystems

    if [[ -n "${CLOUDINIT}" ]]; then
      echo "Installing cloud-config..."
      mkdir -p "${WORKDIR}/rootfs/var/lib/coreos-install"
      cp "${CLOUDINIT}" "${WORKDIR}/rootfs/var/lib/coreos-install/user_data"
    fi

    if [[ -n "${APPDATA}" ]]; then
      echo "Installing appdata to /app..."
      mkdir -p "${WORKDIR}/rootfs/app"
      cp "${APPDATA}/"* "${WORKDIR}/rootfs/app"
    fi

    umount "${WORKDIR}/rootfs"
    trap "rm -rf '${WORKDIR}'" EXIT
fi

if [[ -n "${IGNITION}" ]]; then
    # The OEM partition should be #3 but make no assumptions here!
    # Also don't mount by label directly in case other devices conflict.
    OEM_DEV=$(blkid -t "LABEL=OEM" -o device "${DEVICE}"*)

    if [[ -z "${OEM_DEV}" ]]; then
      echo "Unable to find new OEM partition on ${DEVICE}" >&2
      exit 1
    fi

    mkdir -p "${WORKDIR}/oemfs"
    mount "${OEM_DEV}" "${WORKDIR}/oemfs"
    trap "umount '${WORKDIR}/oemfs' && rm -rf '${WORKDIR}'" EXIT

    echo "Installing Ignition config ${IGNITION}..."
    cp "${IGNITION}" "${WORKDIR}/oemfs/coreos-install.json"
    echo  "set linux_append=\"coreos.config.url=oem:///coreos-install.json"\" > "${WORKDIR}/oemfs/grub.cfg"

    umount "${WORKDIR}/oemfs"
    trap "rm -rf '${WORKDIR}'" EXIT
fi

rm -rf "${WORKDIR}"
trap - EXIT

echo "Success! CoreOS is installed on ${DEVICE}"
